package com.healthstore.repository;

import com.healthstore.model.ProductVariant;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public interface ProductVariantRepository extends JpaRepository<ProductVariant, Long> {
    
    Optional<ProductVariant> findById(Long id);
    
    List<ProductVariant> findByProductId(Long productId);
    
    boolean existsBySku(String sku);
    
    List<ProductVariant> findByStockQuantityLessThanEqual(int quantity);
    
    /**
     * Finds top selling product variants within a date range
     * @param startDate Start date of the period
     * @param endDate End date of the period
     * @param pageable Pagination information
     * @return List of Object arrays containing ProductVariant, total quantity sold, and total revenue
     */
    @Query("SELECT oi.productVariant, SUM(oi.quantity) as totalQuantity, SUM(oi.finalPrice) as totalRevenue " +
           "FROM OrderItem oi " +
           "JOIN oi.order o " +
           "WHERE o.orderDate BETWEEN :startDate AND :endDate " +
           "AND o.status = 'COMPLETED' " +
           "GROUP BY oi.productVariant " +
           "ORDER BY totalQuantity DESC")
    Page<Object[]> findTopSellingProducts(
            @Param("startDate") LocalDateTime startDate,
            @Param("endDate") LocalDateTime endDate,
            Pageable pageable
    );
    
    /**
     * Finds the total quantity sold for a specific product variant
     * @param variantId The ID of the product variant
     * @param startDate Start date of the period
     * @param endDate End date of the period
     * @return Total quantity sold as a Long
     */
    @Query("SELECT COALESCE(SUM(oi.quantity), 0) " +
           "FROM OrderItem oi " +
           "JOIN oi.order o " +
           "WHERE oi.productVariant.id = :variantId " +
           "AND o.orderDate BETWEEN :startDate AND :endDate " +
           "AND o.status = 'COMPLETED'")
    Long findTotalQuantitySold(
            @Param("variantId") Long variantId,
            @Param("startDate") LocalDateTime startDate,
            @Param("endDate") LocalDateTime endDate
    );
    
    /**
     * Finds the total revenue generated by a specific product variant
     * @param variantId The ID of the product variant
     * @param startDate Start date of the period
     * @param endDate End date of the period
     * @return Total revenue as a BigDecimal
     */
    @Query("SELECT COALESCE(SUM(oi.finalPrice), 0) " +
           "FROM OrderItem oi " +
           "JOIN oi.order o " +
           "WHERE oi.productVariant.id = :variantId " +
           "AND o.orderDate BETWEEN :startDate AND :endDate " +
           "AND o.status = 'COMPLETED'")
    BigDecimal findTotalRevenueByVariant(
            @Param("variantId") Long variantId,
            @Param("startDate") LocalDateTime startDate,
            @Param("endDate") LocalDateTime endDate
    );
}
